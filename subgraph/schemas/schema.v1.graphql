type DataSet @entity(immutable: false) {
  id: Bytes! # setId
  setId: BigInt! # uint256
  listener: Bytes! # address
  providerId: BigInt! # uint256
  payer: Bytes! # address
  payee: Bytes! # address
  serviceProvider: Provider! # address
  withCDN: Boolean!
  pdpEndEpoch: BigInt!
  leafCount: BigInt! # uint256
  challengeRange: BigInt! # uint256
  isActive: Boolean!
  lastProvenEpoch: BigInt! # uint256
  nextChallengeEpoch: BigInt! # uint256
  totalPieces: BigInt! # uint256
  nextPieceId: BigInt! # uint256
  totalDataSize: BigInt! # uint256
  totalProofs: BigInt! # uint256
  totalProvedPieces: BigInt! # uint256
  totalFaultedPeriods: BigInt! # uint256
  totalFaultedPieces: BigInt! # uint256
  metadataKeys: [String!]
  metadataValues: [String!]
  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!

  # Derived relationships
  pieces: [Piece!]! @derivedFrom(field: "dataSet")
  faultRecords: [FaultRecord!]! @derivedFrom(field: "dataSet")
  rails: [Rail!]! @derivedFrom(field: "dataSet")
}

enum RailType {
  PDP
  CACHE_MISS
  CDN
}

type Rail @entity(immutable: false) {
  id: Bytes!
  railId: BigInt!
  type: RailType!
  token: Bytes!
  from: Bytes!
  to: Bytes!
  operator: Bytes!
  arbiter: Bytes!
  paymentRate: BigInt!
  settledUpto: BigInt!
  settledAmount: BigInt!
  totalFaultedEpochs: BigInt!
  endEpoch: BigInt!
  isActive: Boolean!
  queueLength: BigInt!
  rateChangeQueue: [RateChangeQueue!]! @derivedFrom(field: "rail")

  # Derived relationship
  dataSet: DataSet!
}

type RateChangeQueue @entity(immutable: false) {
  id: Bytes!
  untilEpoch: BigInt!
  rate: BigInt!
  rail: Rail!
}

enum ProviderStatus {
  REGISTERED
  APPROVED
  UNAPPROVED
  REMOVED
}

type Provider @entity(immutable: false) {
  id: Bytes! # Service provider address
  providerId: BigInt!
  serviceProvider: Bytes!
  payee: Bytes!
  name: String!
  description: String!
  status: ProviderStatus!
  registeredAt: BigInt
  approvedAt: BigInt
  isActive: Boolean!

  # Statistics
  totalFaultedPeriods: BigInt!
  totalFaultedPieces: BigInt!
  totalDataSets: BigInt!
  totalPieces: BigInt!
  totalDataSize: BigInt!
  totalProducts: BigInt!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!

  # Derived relationship
  dataSets: [DataSet!]! @derivedFrom(field: "serviceProvider")
  products: [ProviderProduct!]! @derivedFrom(field: "provider")
}

type ProviderProduct @entity(immutable: false) {
  id: ID!
  provider: Provider!
  serviceUrl: String
  productData: Bytes!
  productType: BigInt!
  capabilityKeys: [String!]
  capabilityValues: [String!]
  isActive: Boolean!
}

type Piece @entity(immutable: false) {
  id: Bytes! # Unique ID for Piece (e.g., setId-pieceId)
  setId: BigInt! # uint256 (Keep for filtering/direct access)
  pieceId: BigInt! # uint256
  rawSize: BigInt! # uint256
  leafCount: BigInt! # uint256
  cid: Bytes!
  removed: Boolean!
  totalProofsSubmitted: BigInt! # uint256
  totalPeriodsFaulted: BigInt! # uint256
  lastProvenEpoch: BigInt! # uint256
  lastProvenAt: BigInt! # uint256
  lastFaultedEpoch: BigInt! # uint256
  lastFaultedAt: BigInt! # uint256
  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
  metadataKeys: [String!]
  metadataValues: [String!]

  # Relationship
  dataSet: DataSet! # Link to DataSet (stores DataSet ID)
  # Derived relationships
  faultRecords: [FaultRecord!]! @derivedFrom(field: "pieces") # For many-to-many derived
}

type SumTreeCount @entity(immutable: false) {
  id: Bytes! # setId-pieceId
  setId: BigInt! # uint256 (Keep for filtering/direct access)
  pieceId: BigInt! # uint256
  count: BigInt! # uint256
  lastCount: BigInt! # uint256
  lastDecEpoch: BigInt!
}

type FaultRecord @entity(immutable: true) {
  id: Bytes! # Unique ID (e.g., txHash-logIndex)
  dataSetId: BigInt! # uint256 (Keep for filtering)
  pieceIds: [BigInt!]! # uint256[] (Keep for direct access)
  currentChallengeEpoch: BigInt! # uint256
  nextChallengeEpoch: BigInt! # uint256
  periodsFaulted: BigInt! # uint256
  deadline: BigInt! # uint256
  createdAt: BigInt!
  blockNumber: BigInt!

  # Relationships
  dataSet: DataSet! # Link to DataSet (stores DataSet ID)
  pieces: [Piece!]! # Link to Pieces (stores array of Piece IDs)
}
